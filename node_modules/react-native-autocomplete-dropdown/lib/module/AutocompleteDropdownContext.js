import React, { useCallback, useRef, useState, useEffect } from 'react';
import { StyleSheet, View } from 'react-native';
export const AutocompleteDropdownContext = /*#__PURE__*/React.createContext({
  content: undefined,
  setContent: () => null,
  direction: undefined,
  setDirection: () => null,
  activeInputContainerRef: undefined,
  controllerRef: undefined
});
export const AutocompleteDropdownContextProvider = ({
  headerOffset = 0,
  children
}) => {
  const [content, setContent] = useState();
  const [direction, setDirection] = useState(undefined);
  const [show, setShow] = useState(false);
  const [dropdownHeight, setDropdownHeight] = useState(0);
  const [inputMeasurements, setInputMeasurements] = useState();
  const [opacity, setOpacity] = useState(0);
  const [contentStyles, setContentStyles] = useState(undefined);
  const activeInputContainerRef = useRef(null);
  const controllerRef = useRef(null);
  const positionTrackingIntervalRef = useRef();
  useEffect(() => {
    if (!inputMeasurements?.height) {
      setOpacity(0);
      return;
    }
    if (dropdownHeight && direction === 'up') {
      setContentStyles({
        top: inputMeasurements.y - dropdownHeight - 10 - headerOffset,
        left: inputMeasurements.x,
        width: inputMeasurements.width
      });
      setOpacity(1);
    } else if (direction === 'down') {
      setContentStyles({
        top: inputMeasurements.y + inputMeasurements.height + 5 + headerOffset,
        left: inputMeasurements.x,
        width: inputMeasurements.width
      });
      setOpacity(1);
    }
  }, [direction, dropdownHeight, headerOffset, inputMeasurements?.height, inputMeasurements?.width, inputMeasurements?.x, inputMeasurements?.y]);
  useEffect(() => {
    if (content) {
      activeInputContainerRef?.current?.measure((x, y, width, height, pageX, pageY) => {
        setInputMeasurements({
          x: pageX,
          y: pageY,
          width,
          height
        });
        setShow(true);
      });
    } else {
      setInputMeasurements(undefined);
      setDropdownHeight(0);
      setOpacity(0);
      setContentStyles(undefined);
      setShow(false);
    }
  }, [content]);
  useEffect(() => {
    if (show && !!opacity) {
      positionTrackingIntervalRef.current = setInterval(() => {
        requestAnimationFrame(() => {
          activeInputContainerRef?.current && activeInputContainerRef?.current?.measure((_x, _y, width, height, x, y) => {
            setInputMeasurements(prev => JSON.stringify(prev) === JSON.stringify({
              x,
              y,
              width,
              height
            }) ? prev : {
              x,
              y,
              width,
              height
            });
          });
        });
      }, 16);
    } else {
      clearInterval(positionTrackingIntervalRef.current);
    }
    return () => {
      clearInterval(positionTrackingIntervalRef.current);
    };
  }, [opacity, show]);
  const onLayout = useCallback(e => {
    setDropdownHeight(e.nativeEvent.layout.height);
  }, []);
  return /*#__PURE__*/React.createElement(AutocompleteDropdownContext.Provider, {
    value: {
      content,
      setContent,
      activeInputContainerRef,
      direction,
      setDirection,
      controllerRef
    }
  }, /*#__PURE__*/React.createElement(View, {
    style: styles.clickOutsideHandlerArea,
    onTouchEnd: () => {
      controllerRef.current?.close();
      controllerRef.current?.blur();
    }
  }, children), !!content && show && /*#__PURE__*/React.createElement(View, {
    onLayout: onLayout,
    style: {
      ...styles.wrapper,
      opacity,
      ...contentStyles
    }
  }, content));
};
const styles = StyleSheet.create({
  clickOutsideHandlerArea: {
    flex: 1
  },
  wrapper: {
    position: 'absolute'
  }
});
//# sourceMappingURL=AutocompleteDropdownContext.js.map